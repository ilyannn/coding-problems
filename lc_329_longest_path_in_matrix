"""329. Longest Increasing Path in a Matrix

Given an m x n integers matrix, return the length of the longest increasing path in matrix.

From each cell, you can either move in four directions: left, right, up, or down. You may not move diagonally or move outside the boundary (i.e., wrap-around is not allowed).

---

Writing time: 15 minutes



"""

from collections import defaultdict
from typing import List


class Solution:
    def longestIncreasingPath(self, matrix: List[List[int]]) -> int:
        m, n = len(matrix), len(matrix[0])
        R = n + 2

        def m_enumerate():
            for y, row in enumerate(matrix):
                for x, v in enumerate(row):
                    yield x + R * y, v

        def neighbors(p):
            return (p+1, p-1, p+R, p-R)

        def valueAt(q):
            return matrix[q // R][q % R]

        edges = defaultdict(set)
        for p, v in m_enumerate():
            for q in neighbors(p):
                if valueAt(q) > v:
                    edges[p].add(q)

        answer = [[0] * range(n) for _ in range(m)]

        def forward(s):
            return { q for p in s for q in edges(p)}

        seen = set()
        cur = edges.difference(forward(edges))

        for step in count():
            if not cur:
                return step
            seen |= cur
            cur = forward(cur).difference(seen)
